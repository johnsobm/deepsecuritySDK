# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SmartCheckAPI.api_client import ApiClient


class SessionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sessions_get(self, **kwargs):  # noqa: E501
        """sessions_get  # noqa: E501

        Retrieve a list of sessions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str expand: A comma-separated list of attributes to expand in the results. 
        :param str cursor: An encoded value used to retrieve the next set of results for a query that returns more than `limit` results. 
        :param int limit: The maximum number of records to return. 
        :param str query: Space-separated strings to search for. 
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sessions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sessions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sessions_get_with_http_info(self, **kwargs):  # noqa: E501
        """sessions_get  # noqa: E501

        Retrieve a list of sessions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str expand: A comma-separated list of attributes to expand in the results. 
        :param str cursor: An encoded value used to retrieve the next set of results for a query that returns more than `limit` results. 
        :param int limit: The maximum number of records to return. 
        :param str query: Space-separated strings to search for. 
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'cursor', 'limit', 'query']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_id_delete(self, id, **kwargs):  # noqa: E501
        """sessions_id_delete  # noqa: E501

        Delete a session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The system-assigned session ID.  (required)
        :param bool dryrun: Use the `dryrun=true` query parameter to indicate that the request should only be tested for validity and should not actually delete the record. The response code will indicate whether the request was OK (`200 OK`) or whether there was a problem in the request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sessions_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sessions_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """sessions_id_delete  # noqa: E501

        Delete a session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The system-assigned session ID.  (required)
        :param bool dryrun: Use the `dryrun=true` query parameter to indicate that the request should only be tested for validity and should not actually delete the record. The response code will indicate whether the request was OK (`200 OK`) or whether there was a problem in the request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dryrun']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sessions_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_id_get(self, id, **kwargs):  # noqa: E501
        """sessions_id_get  # noqa: E501

        Retrieve details for a session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The system-assigned session ID.  (required)
        :param str expand: A comma-separated list of attributes to expand in the results. 
        :return: InlineResponse2002Sessions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sessions_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sessions_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """sessions_id_get  # noqa: E501

        Retrieve details for a session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The system-assigned session ID.  (required)
        :param str expand: A comma-separated list of attributes to expand in the results. 
        :return: InlineResponse2002Sessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expand']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sessions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002Sessions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_id_post(self, id, **kwargs):  # noqa: E501
        """sessions_id_post  # noqa: E501

        Refresh a session. This request will refresh the session and return a new `token` value with a new expiry time.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_id_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The system-assigned session ID.  (required)
        :param bool dryrun: Use the `dryrun=true` query parameter to indicate that the request should only be tested for validity and should not actually modify the record. The response code will indicate whether the request was OK (`200 OK`) or whether there was a problem in the request. 
        :return: InlineResponse2002Sessions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sessions_id_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_id_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sessions_id_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """sessions_id_post  # noqa: E501

        Refresh a session. This request will refresh the session and return a new `token` value with a new expiry time.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_id_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The system-assigned session ID.  (required)
        :param bool dryrun: Use the `dryrun=true` query parameter to indicate that the request should only be tested for validity and should not actually modify the record. The response code will indicate whether the request was OK (`200 OK`) or whether there was a problem in the request. 
        :return: InlineResponse2002Sessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dryrun']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sessions_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002Sessions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_post(self, **kwargs):  # noqa: E501
        """sessions_post  # noqa: E501

        Create a session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Request5 request:
        :param bool dryrun: Use the `dryrun=true` query parameter to indicate that the request should only be tested for validity and should not actually create a record. The response code will indicate whether the request was OK (`200 OK`) or whether there was a problem in the request. 
        :return: InlineResponse2002Sessions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sessions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sessions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def sessions_post_with_http_info(self, **kwargs):  # noqa: E501
        """sessions_post  # noqa: E501

        Create a session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sessions_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Request5 request:
        :param bool dryrun: Use the `dryrun=true` query parameter to indicate that the request should only be tested for validity and should not actually create a record. The response code will indicate whether the request was OK (`200 OK`) or whether there was a problem in the request. 
        :return: InlineResponse2002Sessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'dryrun']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002Sessions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
