# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from SmartCheckAPI.models.inline_response2003_details_findings import InlineResponse2003DetailsFindings  # noqa: F401,E501


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registry': 'str',
        'repository': 'str',
        'tag': 'str',
        'digest': 'str',
        'status': 'str',
        'findings': 'InlineResponse2003DetailsFindings',
        'updated': 'str'
    }

    attribute_map = {
        'registry': 'registry',
        'repository': 'repository',
        'tag': 'tag',
        'digest': 'digest',
        'status': 'status',
        'findings': 'findings',
        'updated': 'updated'
    }

    def __init__(self, registry=None, repository=None, tag=None, digest=None, status=None, findings=None, updated=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._registry = None
        self._repository = None
        self._tag = None
        self._digest = None
        self._status = None
        self._findings = None
        self._updated = None
        self.discriminator = None

        self.registry = registry
        self.repository = repository
        self.tag = tag
        self.digest = digest
        self.status = status
        if findings is not None:
            self.findings = findings
        self.updated = updated

    @property
    def registry(self):
        """Gets the registry of this Image.  # noqa: E501

        The registry URL where the image can be found.   # noqa: E501

        :return: The registry of this Image.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this Image.

        The registry URL where the image can be found.   # noqa: E501

        :param registry: The registry of this Image.  # noqa: E501
        :type: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")  # noqa: E501

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this Image.  # noqa: E501

        The repository where the image can be found.   # noqa: E501

        :return: The repository of this Image.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Image.

        The repository where the image can be found.   # noqa: E501

        :param repository: The repository of this Image.  # noqa: E501
        :type: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def tag(self):
        """Gets the tag of this Image.  # noqa: E501

        The tag assigned to the image.   # noqa: E501

        :return: The tag of this Image.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Image.

        The tag assigned to the image.   # noqa: E501

        :param tag: The tag of this Image.  # noqa: E501
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def digest(self):
        """Gets the digest of this Image.  # noqa: E501

        The image's hash digest.   # noqa: E501

        :return: The digest of this Image.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this Image.

        The image's hash digest.   # noqa: E501

        :param digest: The digest of this Image.  # noqa: E501
        :type: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501

        self._digest = digest

    @property
    def status(self):
        """Gets the status of this Image.  # noqa: E501

        The image's last known scan status.   # noqa: E501

        :return: The status of this Image.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Image.

        The image's last known scan status.   # noqa: E501

        :param status: The status of this Image.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["", "pending", "in-progress", "completed-no-findings", "completed-with-findings", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def findings(self):
        """Gets the findings of this Image.  # noqa: E501


        :return: The findings of this Image.  # noqa: E501
        :rtype: InlineResponse2003DetailsFindings
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this Image.


        :param findings: The findings of this Image.  # noqa: E501
        :type: InlineResponse2003DetailsFindings
        """

        self._findings = findings

    @property
    def updated(self):
        """Gets the updated of this Image.  # noqa: E501

        The time that the image status was last modified.   # noqa: E501

        :return: The updated of this Image.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Image.

        The time that the image status was last modified.   # noqa: E501

        :param updated: The updated of this Image.  # noqa: E501
        :type: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
