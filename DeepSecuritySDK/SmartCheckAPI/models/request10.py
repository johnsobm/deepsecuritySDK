# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from SmartCheckAPI.models.registriesidscans_source import RegistriesidscansSource  # noqa: F401,E501
from SmartCheckAPI.models.scans_webhooks import ScansWebhooks  # noqa: F401,E501


class Request10(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source': 'RegistriesidscansSource',
        'webhooks': 'list[ScansWebhooks]'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'webhooks': 'webhooks'
    }

    def __init__(self, name=None, source=None, webhooks=None):  # noqa: E501
        """Request10 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._source = None
        self._webhooks = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if webhooks is not None:
            self.webhooks = webhooks

    @property
    def name(self):
        """Gets the name of this Request10.  # noqa: E501

        (optional) A descriptive name for the scan.   # noqa: E501

        :return: The name of this Request10.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Request10.

        (optional) A descriptive name for the scan.   # noqa: E501

        :param name: The name of this Request10.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this Request10.  # noqa: E501


        :return: The source of this Request10.  # noqa: E501
        :rtype: RegistriesidscansSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Request10.


        :param source: The source of this Request10.  # noqa: E501
        :type: RegistriesidscansSource
        """

        self._source = source

    @property
    def webhooks(self):
        """Gets the webhooks of this Request10.  # noqa: E501

        (optional) A list of web hooks to call when events happen for the scan.   # noqa: E501

        :return: The webhooks of this Request10.  # noqa: E501
        :rtype: list[ScansWebhooks]
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this Request10.

        (optional) A list of web hooks to call when events happen for the scan.   # noqa: E501

        :param webhooks: The webhooks of this Request10.  # noqa: E501
        :type: list[ScansWebhooks]
        """

        self._webhooks = webhooks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Request10):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
