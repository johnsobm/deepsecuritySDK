# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScansSourceCredentialsAws(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'access_key_id': 'str',
        'secret_access_key': 'str',
        'role': 'str',
        'external_id': 'str',
        'role_session_name': 'str',
        'registry': 'str'
    }

    attribute_map = {
        'region': 'region',
        'access_key_id': 'accessKeyID',
        'secret_access_key': 'secretAccessKey',
        'role': 'role',
        'external_id': 'externalID',
        'role_session_name': 'roleSessionName',
        'registry': 'registry'
    }

    def __init__(self, region=None, access_key_id=None, secret_access_key=None, role=None, external_id=None, role_session_name=None, registry=None):  # noqa: E501
        """ScansSourceCredentialsAws - a model defined in Swagger"""  # noqa: E501

        self._region = None
        self._access_key_id = None
        self._secret_access_key = None
        self._role = None
        self._external_id = None
        self._role_session_name = None
        self._registry = None
        self.discriminator = None

        self.region = region
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key
        if role is not None:
            self.role = role
        if external_id is not None:
            self.external_id = external_id
        if role_session_name is not None:
            self.role_session_name = role_session_name
        if registry is not None:
            self.registry = registry

    @property
    def region(self):
        """Gets the region of this ScansSourceCredentialsAws.  # noqa: E501

        The AWS region identifier for the region where the registry is located.   # noqa: E501

        :return: The region of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ScansSourceCredentialsAws.

        The AWS region identifier for the region where the registry is located.   # noqa: E501

        :param region: The region of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501
        if region is not None and len(region) > 64:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `64`")  # noqa: E501

        self._region = region

    @property
    def access_key_id(self):
        """Gets the access_key_id of this ScansSourceCredentialsAws.  # noqa: E501

        The optional AWS IAM access key identifier to use when requesting the registry authorization token. If `roleID` is also set, then `accessKeyID` is the AWS IAM access key ID used to authorize the AWS STS `AssumeRole` request to assume the role. If `accessKeyID` is not set, then the default credential chain is used.   # noqa: E501

        :return: The access_key_id of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this ScansSourceCredentialsAws.

        The optional AWS IAM access key identifier to use when requesting the registry authorization token. If `roleID` is also set, then `accessKeyID` is the AWS IAM access key ID used to authorize the AWS STS `AssumeRole` request to assume the role. If `accessKeyID` is not set, then the default credential chain is used.   # noqa: E501

        :param access_key_id: The access_key_id of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if access_key_id is not None and len(access_key_id) > 64:
            raise ValueError("Invalid value for `access_key_id`, length must be less than or equal to `64`")  # noqa: E501

        self._access_key_id = access_key_id

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this ScansSourceCredentialsAws.  # noqa: E501

        The optional AWS IAM secret access key to use when requesting the registry authorization token. If `roleID` is also set, then `secretAccessKey` is the AWS IAM secret access key used to authorize the AWS STS `AssumeRole` request to assume the role.   # noqa: E501

        :return: The secret_access_key of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this ScansSourceCredentialsAws.

        The optional AWS IAM secret access key to use when requesting the registry authorization token. If `roleID` is also set, then `secretAccessKey` is the AWS IAM secret access key used to authorize the AWS STS `AssumeRole` request to assume the role.   # noqa: E501

        :param secret_access_key: The secret_access_key of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if secret_access_key is not None and len(secret_access_key) > 128:
            raise ValueError("Invalid value for `secret_access_key`, length must be less than or equal to `128`")  # noqa: E501

        self._secret_access_key = secret_access_key

    @property
    def role(self):
        """Gets the role of this ScansSourceCredentialsAws.  # noqa: E501

        The optional AWS IAM role to assume when requesting the registry authorization token. If `accessKeyID` is also set, then `accessKeyID` and `secretAccessKey` are used to authorize the STS `AssumeRole` API request when assuming this role. If AccessKeyID is not set, then the default credential chain is used when assuming the role.   # noqa: E501

        :return: The role of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ScansSourceCredentialsAws.

        The optional AWS IAM role to assume when requesting the registry authorization token. If `accessKeyID` is also set, then `accessKeyID` and `secretAccessKey` are used to authorize the STS `AssumeRole` API request when assuming this role. If AccessKeyID is not set, then the default credential chain is used when assuming the role.   # noqa: E501

        :param role: The role of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if role is not None and len(role) > 2048:
            raise ValueError("Invalid value for `role`, length must be less than or equal to `2048`")  # noqa: E501

        self._role = role

    @property
    def external_id(self):
        """Gets the external_id of this ScansSourceCredentialsAws.  # noqa: E501

        The optional \"external ID\" to use when calling the AWS STS `AssumeRole` API to assume the role specified in `roleID`. The external ID may be required by the trust policy on the role being assumed.   # noqa: E501

        :return: The external_id of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ScansSourceCredentialsAws.

        The optional \"external ID\" to use when calling the AWS STS `AssumeRole` API to assume the role specified in `roleID`. The external ID may be required by the trust policy on the role being assumed.   # noqa: E501

        :param external_id: The external_id of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if external_id is not None and len(external_id) > 1224:
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `1224`")  # noqa: E501

        self._external_id = external_id

    @property
    def role_session_name(self):
        """Gets the role_session_name of this ScansSourceCredentialsAws.  # noqa: E501

        The optional \"role session name\" to use when calling the AWS STS AssumeRole API to assume the role specified in `roleID`. If `roleSessionName` is not provided, then `DeepSecuritySmartCheck` will be used.   # noqa: E501

        :return: The role_session_name of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._role_session_name

    @role_session_name.setter
    def role_session_name(self, role_session_name):
        """Sets the role_session_name of this ScansSourceCredentialsAws.

        The optional \"role session name\" to use when calling the AWS STS AssumeRole API to assume the role specified in `roleID`. If `roleSessionName` is not provided, then `DeepSecuritySmartCheck` will be used.   # noqa: E501

        :param role_session_name: The role_session_name of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if role_session_name is not None and len(role_session_name) > 64:
            raise ValueError("Invalid value for `role_session_name`, length must be less than or equal to `64`")  # noqa: E501
        if role_session_name is not None and not re.search('^[\\w+=,.@-]*$', role_session_name):  # noqa: E501
            raise ValueError("Invalid value for `role_session_name`, must be a follow pattern or equal to `/^[\\w+=,.@-]*$/`")  # noqa: E501

        self._role_session_name = role_session_name

    @property
    def registry(self):
        """Gets the registry of this ScansSourceCredentialsAws.  # noqa: E501

        The optional registry ID to use to get the registry authorization token. This can be used to access the registry in another AWS account. If not provided, the default registry will be used.   # noqa: E501

        :return: The registry of this ScansSourceCredentialsAws.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this ScansSourceCredentialsAws.

        The optional registry ID to use to get the registry authorization token. This can be used to access the registry in another AWS account. If not provided, the default registry will be used.   # noqa: E501

        :param registry: The registry of this ScansSourceCredentialsAws.  # noqa: E501
        :type: str
        """
        if registry is not None and len(registry) > 64:
            raise ValueError("Invalid value for `registry`, length must be less than or equal to `64`")  # noqa: E501

        self._registry = registry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScansSourceCredentialsAws):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
