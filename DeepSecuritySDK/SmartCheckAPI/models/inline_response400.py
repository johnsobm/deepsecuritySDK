# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse400(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'fields': 'dict(str, str)'
    }

    attribute_map = {
        'message': 'message',
        'fields': 'fields'
    }

    def __init__(self, message=None, fields=None):  # noqa: E501
        """InlineResponse400 - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._fields = None
        self.discriminator = None

        self.message = message
        if fields is not None:
            self.fields = fields

    @property
    def message(self):
        """Gets the message of this InlineResponse400.  # noqa: E501

        The error message will explain what went wrong and will attempt to give some hints as to how to fix it.   # noqa: E501

        :return: The message of this InlineResponse400.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse400.

        The error message will explain what went wrong and will attempt to give some hints as to how to fix it.   # noqa: E501

        :param message: The message of this InlineResponse400.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def fields(self):
        """Gets the fields of this InlineResponse400.  # noqa: E501

        If present, the `fields` object will indicate which input fields had errors; the attribute name will be the name of the input field and the value will be an error message.   # noqa: E501

        :return: The fields of this InlineResponse400.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this InlineResponse400.

        If present, the `fields` object will indicate which input fields had errors; the attribute name will be the name of the input field and the value will be an error message.   # noqa: E501

        :param fields: The fields of this InlineResponse400.  # noqa: E501
        :type: dict(str, str)
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse400):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
