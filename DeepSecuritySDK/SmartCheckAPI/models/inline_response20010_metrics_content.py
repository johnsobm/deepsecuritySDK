# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20010MetricsContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repositories': 'int',
        'images': 'int'
    }

    attribute_map = {
        'repositories': 'repositories',
        'images': 'images'
    }

    def __init__(self, repositories=None, images=None):  # noqa: E501
        """InlineResponse20010MetricsContent - a model defined in Swagger"""  # noqa: E501

        self._repositories = None
        self._images = None
        self.discriminator = None

        if repositories is not None:
            self.repositories = repositories
        if images is not None:
            self.images = images

    @property
    def repositories(self):
        """Gets the repositories of this InlineResponse20010MetricsContent.  # noqa: E501

        The number of repositories with content in the registry.   # noqa: E501

        :return: The repositories of this InlineResponse20010MetricsContent.  # noqa: E501
        :rtype: int
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this InlineResponse20010MetricsContent.

        The number of repositories with content in the registry.   # noqa: E501

        :param repositories: The repositories of this InlineResponse20010MetricsContent.  # noqa: E501
        :type: int
        """

        self._repositories = repositories

    @property
    def images(self):
        """Gets the images of this InlineResponse20010MetricsContent.  # noqa: E501

        The number of images in the registry.   # noqa: E501

        :return: The images of this InlineResponse20010MetricsContent.  # noqa: E501
        :rtype: int
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this InlineResponse20010MetricsContent.

        The number of images in the registry.   # noqa: E501

        :param images: The images of this InlineResponse20010MetricsContent.  # noqa: E501
        :type: int
        """

        self._images = images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20010MetricsContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
