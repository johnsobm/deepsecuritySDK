# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Source(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'registry': 'str',
        'repository': 'str',
        'tag': 'str',
        'insecure_skip_verify': 'bool',
        'root_c_as': 'str'
    }

    attribute_map = {
        'type': 'type',
        'registry': 'registry',
        'repository': 'repository',
        'tag': 'tag',
        'insecure_skip_verify': 'insecureSkipVerify',
        'root_c_as': 'rootCAs'
    }

    def __init__(self, type=None, registry=None, repository=None, tag=None, insecure_skip_verify=None, root_c_as=None):  # noqa: E501
        """Source - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._registry = None
        self._repository = None
        self._tag = None
        self._insecure_skip_verify = None
        self._root_c_as = None
        self.discriminator = None

        self.type = type
        if registry is not None:
            self.registry = registry
        if repository is not None:
            self.repository = repository
        if tag is not None:
            self.tag = tag
        if insecure_skip_verify is not None:
            self.insecure_skip_verify = insecure_skip_verify
        if root_c_as is not None:
            self.root_c_as = root_c_as

    @property
    def type(self):
        """Gets the type of this Source.  # noqa: E501


        :return: The type of this Source.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.


        :param type: The type of this Source.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["docker"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def registry(self):
        """Gets the registry of this Source.  # noqa: E501

        (for scan type `docker` only) The registry hostname or IP address.   # noqa: E501

        :return: The registry of this Source.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this Source.

        (for scan type `docker` only) The registry hostname or IP address.   # noqa: E501

        :param registry: The registry of this Source.  # noqa: E501
        :type: str
        """
        if registry is not None and len(registry) > 255:
            raise ValueError("Invalid value for `registry`, length must be less than or equal to `255`")  # noqa: E501

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this Source.  # noqa: E501

        (for scan type `docker` only) The repository name.   # noqa: E501

        :return: The repository of this Source.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Source.

        (for scan type `docker` only) The repository name.   # noqa: E501

        :param repository: The repository of this Source.  # noqa: E501
        :type: str
        """
        if repository is not None and len(repository) > 255:
            raise ValueError("Invalid value for `repository`, length must be less than or equal to `255`")  # noqa: E501

        self._repository = repository

    @property
    def tag(self):
        """Gets the tag of this Source.  # noqa: E501

        (for scan type `docker` only) The tag of the image to scan.   # noqa: E501

        :return: The tag of this Source.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Source.

        (for scan type `docker` only) The tag of the image to scan.   # noqa: E501

        :param tag: The tag of this Source.  # noqa: E501
        :type: str
        """
        if tag is not None and len(tag) > 255:
            raise ValueError("Invalid value for `tag`, length must be less than or equal to `255`")  # noqa: E501

        self._tag = tag

    @property
    def insecure_skip_verify(self):
        """Gets the insecure_skip_verify of this Source.  # noqa: E501

        (optional, default: `false`) If `true`, the scan will not verify TLS connections to the source URL. Use this only in controlled environments where you know that connections between the Deep Security Smart Check scanner and the source are secured by other means.   # noqa: E501

        :return: The insecure_skip_verify of this Source.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_skip_verify

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, insecure_skip_verify):
        """Sets the insecure_skip_verify of this Source.

        (optional, default: `false`) If `true`, the scan will not verify TLS connections to the source URL. Use this only in controlled environments where you know that connections between the Deep Security Smart Check scanner and the source are secured by other means.   # noqa: E501

        :param insecure_skip_verify: The insecure_skip_verify of this Source.  # noqa: E501
        :type: bool
        """

        self._insecure_skip_verify = insecure_skip_verify

    @property
    def root_c_as(self):
        """Gets the root_c_as of this Source.  # noqa: E501

        (optional, default: `null`) If present, the web hook will use the provided root CAs as the trusted root CAs for HTTPS web hook requests. The value should be a base-64 encoded list of PEM-encoded certificates. If not present, the web hook will use a set of built-in trusted root CAs. If `insecureSkipVerify` is set to `true`, then the root CAs are not checked.   # noqa: E501

        :return: The root_c_as of this Source.  # noqa: E501
        :rtype: str
        """
        return self._root_c_as

    @root_c_as.setter
    def root_c_as(self, root_c_as):
        """Sets the root_c_as of this Source.

        (optional, default: `null`) If present, the web hook will use the provided root CAs as the trusted root CAs for HTTPS web hook requests. The value should be a base-64 encoded list of PEM-encoded certificates. If not present, the web hook will use a set of built-in trusted root CAs. If `insecureSkipVerify` is set to `true`, then the root CAs are not checked.   # noqa: E501

        :param root_c_as: The root_c_as of this Source.  # noqa: E501
        :type: str
        """
        if root_c_as is not None and len(root_c_as) > 32768:
            raise ValueError("Invalid value for `root_c_as`, length must be less than or equal to `32768`")  # noqa: E501

        self._root_c_as = root_c_as

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
