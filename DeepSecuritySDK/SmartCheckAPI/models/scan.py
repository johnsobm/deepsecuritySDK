# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from SmartCheckAPI.models.inline_response2003_details import InlineResponse2003Details  # noqa: F401,E501
from SmartCheckAPI.models.inline_response2003_details_findings import InlineResponse2003DetailsFindings  # noqa: F401,E501
from SmartCheckAPI.models.inline_response2003_source import InlineResponse2003Source  # noqa: F401,E501


class Scan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'source': 'InlineResponse2003Source',
        'status': 'str',
        'details': 'InlineResponse2003Details',
        'findings': 'InlineResponse2003DetailsFindings'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'source': 'source',
        'status': 'status',
        'details': 'details',
        'findings': 'findings'
    }

    def __init__(self, id=None, href=None, name=None, source=None, status=None, details=None, findings=None):  # noqa: E501
        """Scan - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._href = None
        self._name = None
        self._source = None
        self._status = None
        self._details = None
        self._findings = None
        self.discriminator = None

        self.id = id
        self.href = href
        self.name = name
        if source is not None:
            self.source = source
        self.status = status
        if details is not None:
            self.details = details
        if findings is not None:
            self.findings = findings

    @property
    def id(self):
        """Gets the id of this Scan.  # noqa: E501

        The unique ID assigned to this scan.   # noqa: E501

        :return: The id of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scan.

        The unique ID assigned to this scan.   # noqa: E501

        :param id: The id of this Scan.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this Scan.  # noqa: E501

        The URL to the scan resource.   # noqa: E501

        :return: The href of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Scan.

        The URL to the scan resource.   # noqa: E501

        :param href: The href of this Scan.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def name(self):
        """Gets the name of this Scan.  # noqa: E501

        If you provided a name for the scan, it will be returned here.   # noqa: E501

        :return: The name of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scan.

        If you provided a name for the scan, it will be returned here.   # noqa: E501

        :param name: The name of this Scan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this Scan.  # noqa: E501


        :return: The source of this Scan.  # noqa: E501
        :rtype: InlineResponse2003Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Scan.


        :param source: The source of this Scan.  # noqa: E501
        :type: InlineResponse2003Source
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Scan.  # noqa: E501


        :return: The status of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Scan.


        :param status: The status of this Scan.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "in-progress", "completed-with-findings", "completed-no-findings", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def details(self):
        """Gets the details of this Scan.  # noqa: E501


        :return: The details of this Scan.  # noqa: E501
        :rtype: InlineResponse2003Details
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Scan.


        :param details: The details of this Scan.  # noqa: E501
        :type: InlineResponse2003Details
        """

        self._details = details

    @property
    def findings(self):
        """Gets the findings of this Scan.  # noqa: E501


        :return: The findings of this Scan.  # noqa: E501
        :rtype: InlineResponse2003DetailsFindings
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this Scan.


        :param findings: The findings of this Scan.  # noqa: E501
        :type: InlineResponse2003DetailsFindings
        """

        self._findings = findings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
