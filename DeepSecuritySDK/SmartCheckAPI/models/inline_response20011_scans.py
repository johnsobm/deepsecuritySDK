# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20011Scans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pending': 'int',
        'ok': 'int',
        'warnings': 'int',
        'errors': 'int'
    }

    attribute_map = {
        'pending': 'pending',
        'ok': 'ok',
        'warnings': 'warnings',
        'errors': 'errors'
    }

    def __init__(self, pending=None, ok=None, warnings=None, errors=None):  # noqa: E501
        """InlineResponse20011Scans - a model defined in Swagger"""  # noqa: E501

        self._pending = None
        self._ok = None
        self._warnings = None
        self._errors = None
        self.discriminator = None

        if pending is not None:
            self.pending = pending
        if ok is not None:
            self.ok = ok
        if warnings is not None:
            self.warnings = warnings
        if errors is not None:
            self.errors = errors

    @property
    def pending(self):
        """Gets the pending of this InlineResponse20011Scans.  # noqa: E501

        The number of images in all registries that have not yet been scanned.   # noqa: E501

        :return: The pending of this InlineResponse20011Scans.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this InlineResponse20011Scans.

        The number of images in all registries that have not yet been scanned.   # noqa: E501

        :param pending: The pending of this InlineResponse20011Scans.  # noqa: E501
        :type: int
        """

        self._pending = pending

    @property
    def ok(self):
        """Gets the ok of this InlineResponse20011Scans.  # noqa: E501

        The number of images in all registries that have been scanned and have had no findings.   # noqa: E501

        :return: The ok of this InlineResponse20011Scans.  # noqa: E501
        :rtype: int
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this InlineResponse20011Scans.

        The number of images in all registries that have been scanned and have had no findings.   # noqa: E501

        :param ok: The ok of this InlineResponse20011Scans.  # noqa: E501
        :type: int
        """

        self._ok = ok

    @property
    def warnings(self):
        """Gets the warnings of this InlineResponse20011Scans.  # noqa: E501

        The number of images in all registries that have been scanned and have had findings.   # noqa: E501

        :return: The warnings of this InlineResponse20011Scans.  # noqa: E501
        :rtype: int
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this InlineResponse20011Scans.

        The number of images in all registries that have been scanned and have had findings.   # noqa: E501

        :param warnings: The warnings of this InlineResponse20011Scans.  # noqa: E501
        :type: int
        """

        self._warnings = warnings

    @property
    def errors(self):
        """Gets the errors of this InlineResponse20011Scans.  # noqa: E501

        The number of images in all registries that have been scanned and have encountered errors during the scan.   # noqa: E501

        :return: The errors of this InlineResponse20011Scans.  # noqa: E501
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InlineResponse20011Scans.

        The number of images in all registries that have been scanned and have encountered errors during the scan.   # noqa: E501

        :param errors: The errors of this InlineResponse20011Scans.  # noqa: E501
        :type: int
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011Scans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
