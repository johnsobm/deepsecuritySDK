# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from SmartCheckAPI.models.scans_headers import ScansHeaders  # noqa: F401,E501


class Request7(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'hook_url': 'str',
        'headers': 'list[ScansHeaders]',
        'secret': 'str',
        'insecure_skip_verify': 'bool',
        'root_c_as': 'str',
        'active': 'bool',
        'events': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'hook_url': 'hookURL',
        'headers': 'headers',
        'secret': 'secret',
        'insecure_skip_verify': 'insecureSkipVerify',
        'root_c_as': 'rootCAs',
        'active': 'active',
        'events': 'events'
    }

    def __init__(self, name=None, hook_url=None, headers=None, secret=None, insecure_skip_verify=None, root_c_as=None, active=None, events=None):  # noqa: E501
        """Request7 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._hook_url = None
        self._headers = None
        self._secret = None
        self._insecure_skip_verify = None
        self._root_c_as = None
        self._active = None
        self._events = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.hook_url = hook_url
        if headers is not None:
            self.headers = headers
        if secret is not None:
            self.secret = secret
        if insecure_skip_verify is not None:
            self.insecure_skip_verify = insecure_skip_verify
        if root_c_as is not None:
            self.root_c_as = root_c_as
        if active is not None:
            self.active = active
        if events is not None:
            self.events = events

    @property
    def name(self):
        """Gets the name of this Request7.  # noqa: E501

        (optional) A descriptive name for the web hook.   # noqa: E501

        :return: The name of this Request7.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Request7.

        (optional) A descriptive name for the web hook.   # noqa: E501

        :param name: The name of this Request7.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def hook_url(self):
        """Gets the hook_url of this Request7.  # noqa: E501


        :return: The hook_url of this Request7.  # noqa: E501
        :rtype: str
        """
        return self._hook_url

    @hook_url.setter
    def hook_url(self, hook_url):
        """Sets the hook_url of this Request7.


        :param hook_url: The hook_url of this Request7.  # noqa: E501
        :type: str
        """
        if hook_url is None:
            raise ValueError("Invalid value for `hook_url`, must not be `None`")  # noqa: E501
        if hook_url is not None and len(hook_url) > 255:
            raise ValueError("Invalid value for `hook_url`, length must be less than or equal to `255`")  # noqa: E501

        self._hook_url = hook_url

    @property
    def headers(self):
        """Gets the headers of this Request7.  # noqa: E501

        (optional) You can include your own headers in the web hook request. Use these to provide additional context or authentication information to your web hook receiver.   # noqa: E501

        :return: The headers of this Request7.  # noqa: E501
        :rtype: list[ScansHeaders]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Request7.

        (optional) You can include your own headers in the web hook request. Use these to provide additional context or authentication information to your web hook receiver.   # noqa: E501

        :param headers: The headers of this Request7.  # noqa: E501
        :type: list[ScansHeaders]
        """

        self._headers = headers

    @property
    def secret(self):
        """Gets the secret of this Request7.  # noqa: E501

        (optional) If you provide a `secret` value, then events sent over HTTP will include an `X-Scan-Event-Signature` header that is the SHA-256 HMAC of the event body using your secret as the key.  *This value is write-only: the API will not return the secret or show that it has been set.*   # noqa: E501

        :return: The secret of this Request7.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Request7.

        (optional) If you provide a `secret` value, then events sent over HTTP will include an `X-Scan-Event-Signature` header that is the SHA-256 HMAC of the event body using your secret as the key.  *This value is write-only: the API will not return the secret or show that it has been set.*   # noqa: E501

        :param secret: The secret of this Request7.  # noqa: E501
        :type: str
        """
        if secret is not None and len(secret) > 64:
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `64`")  # noqa: E501

        self._secret = secret

    @property
    def insecure_skip_verify(self):
        """Gets the insecure_skip_verify of this Request7.  # noqa: E501

        (optional, default: `false`) If `true`, the web hook will not verify TLS connections to the web hook URL. Use this only in controlled environments where you know that connections between the Deep Security Smart Check scanner and the hook URL are secured by other means.   # noqa: E501

        :return: The insecure_skip_verify of this Request7.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_skip_verify

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, insecure_skip_verify):
        """Sets the insecure_skip_verify of this Request7.

        (optional, default: `false`) If `true`, the web hook will not verify TLS connections to the web hook URL. Use this only in controlled environments where you know that connections between the Deep Security Smart Check scanner and the hook URL are secured by other means.   # noqa: E501

        :param insecure_skip_verify: The insecure_skip_verify of this Request7.  # noqa: E501
        :type: bool
        """

        self._insecure_skip_verify = insecure_skip_verify

    @property
    def root_c_as(self):
        """Gets the root_c_as of this Request7.  # noqa: E501

        (optional, default: `null`) If present, the web hook will use the provided root CAs as the trusted root CAs for HTTPS web hook requests. The value should be a base-64 encoded list of PEM-encoded certificates. If not present, the web hook will use a set of built-in trusted root CAs. If `insecureSkipVerify` is set to `true`, then the root CAs are not checked.   # noqa: E501

        :return: The root_c_as of this Request7.  # noqa: E501
        :rtype: str
        """
        return self._root_c_as

    @root_c_as.setter
    def root_c_as(self, root_c_as):
        """Sets the root_c_as of this Request7.

        (optional, default: `null`) If present, the web hook will use the provided root CAs as the trusted root CAs for HTTPS web hook requests. The value should be a base-64 encoded list of PEM-encoded certificates. If not present, the web hook will use a set of built-in trusted root CAs. If `insecureSkipVerify` is set to `true`, then the root CAs are not checked.   # noqa: E501

        :param root_c_as: The root_c_as of this Request7.  # noqa: E501
        :type: str
        """
        if root_c_as is not None and len(root_c_as) > 32768:
            raise ValueError("Invalid value for `root_c_as`, length must be less than or equal to `32768`")  # noqa: E501

        self._root_c_as = root_c_as

    @property
    def active(self):
        """Gets the active of this Request7.  # noqa: E501

        (optional, default: `false`). If `true`, the web hook will be invoked whenever a matching event occurs.   # noqa: E501

        :return: The active of this Request7.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Request7.

        (optional, default: `false`). If `true`, the web hook will be invoked whenever a matching event occurs.   # noqa: E501

        :param active: The active of this Request7.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def events(self):
        """Gets the events of this Request7.  # noqa: E501

        (optional, default: `[\"*\"]`) If present, this is a list of event types that will be checked before calling the web hook. If the event type matches one of the elements of the list, the web hook will be called. If the list is empty, *all* events will match.   # noqa: E501

        :return: The events of this Request7.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Request7.

        (optional, default: `[\"*\"]`) If present, this is a list of event types that will be checked before calling the web hook. If the event type matches one of the elements of the list, the web hook will be called. If the list is empty, *all* events will match.   # noqa: E501

        :param events: The events of this Request7.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["scan-requested", "scan-started", "scan-completed", "*"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Request7):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
