# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from SmartCheckAPI.models.inline_response20011_content import InlineResponse20011Content  # noqa: F401,E501
from SmartCheckAPI.models.inline_response20011_history import InlineResponse20011History  # noqa: F401,E501
from SmartCheckAPI.models.inline_response20011_scans import InlineResponse20011Scans  # noqa: F401,E501
from SmartCheckAPI.models.inline_response2003_details_findings import InlineResponse2003DetailsFindings  # noqa: F401,E501


class InlineResponse20011(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'InlineResponse20011Content',
        'scans': 'InlineResponse20011Scans',
        'findings': 'InlineResponse2003DetailsFindings',
        'history': 'InlineResponse20011History'
    }

    attribute_map = {
        'content': 'content',
        'scans': 'scans',
        'findings': 'findings',
        'history': 'history'
    }

    def __init__(self, content=None, scans=None, findings=None, history=None):  # noqa: E501
        """InlineResponse20011 - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._scans = None
        self._findings = None
        self._history = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if scans is not None:
            self.scans = scans
        if findings is not None:
            self.findings = findings
        if history is not None:
            self.history = history

    @property
    def content(self):
        """Gets the content of this InlineResponse20011.  # noqa: E501


        :return: The content of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20011.


        :param content: The content of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011Content
        """

        self._content = content

    @property
    def scans(self):
        """Gets the scans of this InlineResponse20011.  # noqa: E501


        :return: The scans of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011Scans
        """
        return self._scans

    @scans.setter
    def scans(self, scans):
        """Sets the scans of this InlineResponse20011.


        :param scans: The scans of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011Scans
        """

        self._scans = scans

    @property
    def findings(self):
        """Gets the findings of this InlineResponse20011.  # noqa: E501


        :return: The findings of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse2003DetailsFindings
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this InlineResponse20011.


        :param findings: The findings of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse2003DetailsFindings
        """

        self._findings = findings

    @property
    def history(self):
        """Gets the history of this InlineResponse20011.  # noqa: E501


        :return: The history of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011History
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this InlineResponse20011.


        :param history: The history of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011History
        """

        self._history = history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
