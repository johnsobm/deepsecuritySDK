# coding: utf-8

"""
    Deep Security Smart Check

    Deep Security Smart Check is a container image scanner from Trend Micro.   # noqa: E501

    OpenAPI spec version: 2018-05-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2003DetailsFindingsScannersMalwareVersions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icrc': 'str',
        'trend_x': 'str',
        'blacklist': 'str'
    }

    attribute_map = {
        'icrc': 'icrc',
        'trend_x': 'trendX',
        'blacklist': 'blacklist'
    }

    def __init__(self, icrc=None, trend_x=None, blacklist=None):  # noqa: E501
        """InlineResponse2003DetailsFindingsScannersMalwareVersions - a model defined in Swagger"""  # noqa: E501

        self._icrc = None
        self._trend_x = None
        self._blacklist = None
        self.discriminator = None

        if icrc is not None:
            self.icrc = icrc
        if trend_x is not None:
            self.trend_x = trend_x
        if blacklist is not None:
            self.blacklist = blacklist

    @property
    def icrc(self):
        """Gets the icrc of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501

        The ICRC pattern version.   # noqa: E501

        :return: The icrc of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501
        :rtype: str
        """
        return self._icrc

    @icrc.setter
    def icrc(self, icrc):
        """Sets the icrc of this InlineResponse2003DetailsFindingsScannersMalwareVersions.

        The ICRC pattern version.   # noqa: E501

        :param icrc: The icrc of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501
        :type: str
        """

        self._icrc = icrc

    @property
    def trend_x(self):
        """Gets the trend_x of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501

        The TrendX pattern version.   # noqa: E501

        :return: The trend_x of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501
        :rtype: str
        """
        return self._trend_x

    @trend_x.setter
    def trend_x(self, trend_x):
        """Sets the trend_x of this InlineResponse2003DetailsFindingsScannersMalwareVersions.

        The TrendX pattern version.   # noqa: E501

        :param trend_x: The trend_x of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501
        :type: str
        """

        self._trend_x = trend_x

    @property
    def blacklist(self):
        """Gets the blacklist of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501

        The malware blacklist pattern version.   # noqa: E501

        :return: The blacklist of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501
        :rtype: str
        """
        return self._blacklist

    @blacklist.setter
    def blacklist(self, blacklist):
        """Sets the blacklist of this InlineResponse2003DetailsFindingsScannersMalwareVersions.

        The malware blacklist pattern version.   # noqa: E501

        :param blacklist: The blacklist of this InlineResponse2003DetailsFindingsScannersMalwareVersions.  # noqa: E501
        :type: str
        """

        self._blacklist = blacklist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003DetailsFindingsScannersMalwareVersions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
